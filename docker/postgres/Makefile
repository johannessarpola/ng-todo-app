# import config.
# You can change the default config with `make cnf="config_special.env" build`
cnf ?= config.env
include $(cnf)

# DOCKER TASKS
# Build the container
build: ## Build the container
	docker build -t $(APP_NAME) .

build-nc: ## Build the container without caching
	docker build --no-cache -t $(APP_NAME) .

run: ## Run container on port configured in `config.env`
	docker run -i -t --rm --env-file ./config.env -p $(POSTGRES_PORT):$(POSTGRES_PORT) --name "$(APP_NAME)" $(APP_NAME)

non-rm-run: ## Run container on port configured in `config.env`
	docker run -i -t --env-file ./config.env -p $(POSTGRES_PORT):$(POSTGRES_PORT) --name "$(APP_NAME)" $(APP_NAME)

run-daemon: ## Run container on port configured in `config.env`
	docker run -d -i -t --rm --env-file ./config.env -p $(POSTGRES_PORT):$(POSTGRES_PORT) --name "$(APP_NAME)" $(APP_NAME)

non-rm-run-daemon: ## Run container on port configured in `config.env`
	docker run -d -i -t --env-file ./config.env -p $(POSTGRES_PORT):$(POSTGRES_PORT) --name "$(APP_NAME)" $(APP_NAME)

up: build run ## Run container on port configured in `config.env` (Alias to run)

non-rm-up: build non-rm-run ## Run container on port configured in `config.env` (Alias to run)

stop: ## Stop and remove a running container
	docker stop $(APP_NAME); docker rm $(APP_NAME)

# Docker tagging
tag: tag-latest tag-version ## Generate container tags for the `{version}` ans `latest` tags

tag-latest: ## Generate container `{version}` tag
	@echo 'create tag latest'
	docker tag $(APP_NAME) $(DOCKER_REPO)/$(APP_NAME):latest

tag-version: ## Generate container `latest` tag
	@echo 'create tag $(VERSION)'
	docker tag $(APP_NAME) $(DOCKER_REPO)/$(APP_NAME):$(VERSION)
